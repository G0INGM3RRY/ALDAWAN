``````````````````````plaintext
````````````````````DEVELOPMENT SERVER SETUP```````````````````````````````````````````````

LOCAL DEVELOPMENT (Computer Only):
- Start Laragon
- php artisan serve
- npm run dev
- Access: http://localhost:8000 or http://127.0.0.1:8000

MOBILE ACCESS (Phone on Same Network):
1. Find your computer's IP address:
   Windows: ipconfig (look for IPv4 Address)
   Mac/Linux: ifconfig or ip addr show
   
2. Start Laravel with your IP address:
   php artisan serve --host=0.0.0.0 --port=8000
   OR
   php artisan serve --host=YOUR_IP_ADDRESS --port=8000
   
3. Start Vite with network access:
   npm run dev -- --host=0.0.0.0
   OR
   npm run dev -- --host=YOUR_IP_ADDRESS
   
4. Access from phone:
   http://YOUR_IP_ADDRESS:8000
   
Example:
- If your computer IP is 192.168.1.100
- Commands: 
  php artisan serve --host=192.168.1.100 --port=8000
  npm run dev -- --host=192.168.1.100
- Phone URL: http://192.168.1.100:8000

IMPORTANT NOTES:
- Both devices must be on same WiFi network
- Disable firewall or allow ports 8000 and 5173
- Use actual IP address, not localhost/127.0.0.1
- Keep both terminals running (artisan serve + npm run dev)

------------------------------------------------------------------------------------------------------------------------
Order
Model + Migration first: you lock the schema, so everything else stops drifting.

Routes next: sets the contract (URLs & verbs) early.

Controller next: glue logic with clear inputs/outputs.

Views last: UI builds on stable data and endpoints. Less rework

------------------------------------------------------------------------------------------------------------------

07/29 = made the seeder and 'users' on /resources/views/

07/30 = made a dummy user creation form w/ successful db connection
      = the complete profile creation/update still has no form
      = made the connection from register, complete registration, up to dashboard of job seekers.no functionalities and elements for now

07/31 = made the skeleton form of the complete.blade.db
      = planned to be on steps so the screen isnt bombarded          
      = marked the sections for easy steps implementation

08/02 = fixed jobseeker registration flow & created reusable dashboard layout
      = updated profile completion routing & success messages
``````````````````````

08/03 = moving the dashboard to jobseeker folder
      = made the fixed error in employer redirection 
      = noticed the wrong logic in using layouts.dashboard's profile update as it both accessed by employers and job seekers


08/07 = created employers complete.blade


08/08 = made an employers table
      = routing the post of the completeblade for employers working
      = not yet figured out how to implment and differentiate update forms to edit forms
      = bug in routing of employer dashboard
      = fixed duplicate controller imports in web.php that caused PHP errors
      = cleaned up routes/web.php with better organization and comments
      = fixed file upload handling in EmployerProfileController for company logos
      = updated forms to use proper enctype="multipart/form-data" for file uploads
      = streamlined UserController to remove redundant/unused methods


      = fixed relationship name casing in EmployerProfileController (employerProfile vs EmployerProfile)
      = improved routes organization with clear section headers
      = consolidated employer routes to use EmployerProfileController consistently


08/09 = transformed welcome.blade.php from Laravel default to professional job portal homepage
      = replaced Tailwind-based design with Bootstrap 5 for consistency with dashboard layout
      = created responsive navigation with ALDAWAN branding and authentication links
      = implemented hero section with job search functionality (job title, location, search)
      = added features section highlighting: Top Employers, Fast Hiring, Verified Jobs
      = created job categories section with 8 popular categories and job counts
      = simplified design by removing all icons and fancy effects for cleaner appearance
      = changed from gradient backgrounds to simple light backgrounds
      = removed FontAwesome dependency to reduce complexity
      = maintained authentication flow integration (login/register/dashboard links)
      = ensured mobile-responsive design with Bootstrap grid system

08/11 = transformed welcome.blade.php from Laravel default to job portal homepage
      = replaced complex SVG/Tailwind with clean Bootstrap design
      = removed location field from search (out of scope)
      = updated features: "Informal Jobs" & "PESO Verified Jobs"
      = removed "Companies" nav link and job categories section
      = simplified search layout (6-col input + 3-col button)
      = committed to GitHub: https://github.com/G0INGM3RRY/ALDAWAN
      = fixed employer dashboard "Update Profile" routing issue (was using /complete instead of /edit)
      = made dashboard navigation dynamic based on user role (employers vs jobseekers)
      = fixed jobseeker edit form pre-filling data (controller now passes profile data)
      = added value="{{ old('field', $profile->field ?? '') }}" to all form inputs in edit.blade.php
      = updated select dropdowns and checkboxes to show previously saved values
      = added Job relationship to User model (commented/incomplete - no Job model created yet)

08/13 = created job_listings table & seeder with sample data
      = fixed migration conflicts (removed duplicate jobs table migration)
      = seeded 5 sample jobs: Software Dev, Customer Service, Marketing, Data Entry, Graphic Design
      = table structure: job_title, description, salary, location, employment_type, status, classification

      = updated Jobs model to use job_listings table & added relationships
      = fixed User model jobs() relationship to reference Jobs class







08/17 = completed full CRUD job management system for employers
      = created job posting form (create.blade.php) with all required fields
      = added complete job editing functionality with pre-filled values & status management
      = implemented secure delete with CSRF protection & confirmation dialog
      = fixed database enum to include 'filled' status (open/closed/filled)
      = added proper authorization checks (job owners only can edit/delete)
      = created job listings index page with card layout & action buttons
      = updated migration to support 'filled' status for job completion tracking
      = added User model import to JobseekerProfileController to fix PHP linting errors
      = job status meanings: open=accepting apps, closed=paused, filled=position occupied

      = added job preferences system for jobseekers
      = created job_preferences table with migration (job title, classification, salary range, location, employment type)
      = added JobPreference model with User relationship  
      = updated User model with jobseekerProfile() and jobPreferences() relationships
      = added job preferences section to complete.blade.php with dynamic add/remove functionality
      = added job preferences section to edit.blade.php with pre-filled existing data
      = updated JobseekerProfileController to handle saving/updating preferences
      = implemented JavaScript for dynamic preference management (add/remove buttons)
      = job preferences use same classifications as job postings for future matching

08/18 = built complete job browsing system for public access
      = created JobController with index() and show() methods for public job viewing
      = fixed layout conflicts ($slot vs @yield issues) between job views and dashboard  
      = corrected database field mapping (job_title vs title, company relationship paths)
      = created jobs/index.blade.php with card layout showing all jobs
      = created jobs/show.blade.php with detailed job view and apply buttons
      = added "Browse Jobs" navigation to jobseeker dashboard
      = updated jobseeker dashboard to display recent jobs with proper company names
      = fixed Blade syntax errors and file corruption in dashboard.blade.php
      = established proper relationship chain: Job → User → EmployerProfile → company_name
      = integrated job browsing into jobseeker workflow (dashboard → browse → details)
      = added route imports and controller autoloading fixes

08/27 = organized project file structure for better maintainability
      = moved CSS from inline styles to dedicated files (welcome.css, dashboard.css)
      = converted all user pages to use unified dashboard layout system
      = implemented mobile-first navigation with responsive hamburger menu
      = created role-based navigation menus (jobseeker vs employer specific items)
      = transformed jobseeker index into comprehensive "My Profile" page with progress tracking
      = reorganized job browsing views into proper user-type folders for cleaner architecture
      = moved jobs/ views to users/jobseekers/jobs/ structure for logical organization
      = updated JobController to reference new view paths (users.jobseekers.jobs.index/show)
      = redesigned welcome page to match modern job portal design with centered card layout
      = removed unused CSS classes and streamlined styling for performance
      = achieved consistent UI/UX across all pages with proper Bootstrap integration
      = completed file structure reorganization: jobseeker views vs employer views clearly separated



08/31 = **JOB APPLICATION MODULE IMPLEMENTATION**
      = created formal_job_applications migration with comprehensive tracking fields
      = built FormalJobApplication model with relationships and helper methods
      = implemented FormalJobApplicationController with quickApply, store, myApplications methods
      = added proper routes for job application functionality (/jobs/{job}/apply, /jobseekers/applications)
      = updated Jobs model with hasAppliedBy() method for application checking
      = updated User model with application relationships
      = integrated apply button logic in job show view with smart status detection
      = fixed role checking issue (role = 'seeker' not 'jobseeker' in database)
      = debugged and resolved apply button visibility issues
      = **STATUS: Jobseekers can now apply to jobs successfully**
      = **NEXT: Need to implement employer side to view/manage applications**


09/07 = **JOB APPLICATION VIEWING SYSTEM IMPLEMENTATION (OFFLINE WORK)**
      = created "My Applications" functionality for jobseekers
      = added route: GET `/jobseekers/applications` → `FormalJobApplicationController@myApplications`
      = implemented `myApplications()` controller method in FormalJobApplicationController
        • fetches all applications for current authenticated jobseeker
        • loads job and employer relationships for display
        • returns paginated results to view
      = created `resources/views/users/jobseekers/applications.blade.php` view
        • table layout showing: Job Title, Company, Applied Date, Status, Actions
        • status badges with color coding (pending=warning, under_review=info, etc.)
        • "View Details" buttons for each application
        • empty state message when no applications exist
        • integrated with dashboard layout system
      = added "My Applications" link to jobseeker dashboard navigation
      = implemented application status visualization with Bootstrap badges
      = established foundation for complete application management workflow
      = **STATUS: Jobseekers can now view all submitted applications with current status**
      = **NEXT: Need employer side to view/manage incoming applications**



      SAFE GIT PUSH STEPS (IRREVERSIBLE - USE WITH CAUTION):
      1. git add .                     # Stage all changes
      2. git commit -m "Complete job management CRUD system"  # Commit with message
      3. git push origin main          # Push to GitHub main branch
      
      ALTERNATIVE SAFER APPROACH:
      1. git add .
      2. git commit -m "Complete job management CRUD system"
      3. git push origin main          # Creates backup on GitHub
      4. If needed later: git revert HEAD~1  # Undo last commit (safer than force push)
      
      NUCLEAR OPTION (IRREVERSIBLE - DESTROYS HISTORY):
      git push --force origin main     # DANGER: Overwrites remote history permanently


09/08 = **JOB-LEVEL CLASSIFICATION SYSTEM & EMPLOYER MODULE SEPARATION**
      = **DATABASE IMPROVEMENTS**
        • created migration: `add_job_type_to_job_listings_table` 
        • added `job_type` enum column ('formal', 'informal') to job_listings table
        • updated Jobs model to include 'job_type' in fillable attributes
        • created data migration command: `MigrateJobTypes.php` for existing jobs
        • successfully migrated 5 existing jobs to proper job_type classification

      = **JOB CREATION & MANAGEMENT ENHANCEMENTS**
        • updated job creation form in `employers/create.blade.php` with job type selection
        • added job type dropdown with smart defaults based on employer type
        • included helpful descriptions for formal vs informal job types
        • updated EmployerProfileController validation to include job_type field
        • enhanced job creation to store job_type in database
        • updated job editing forms to handle job_type modification
        • added job type validation in both store and update methods

      = **JOB FILTERING ALGORITHM OVERHAUL**
        • **OLD**: Complex employer-based filtering via relationship queries
        • **NEW**: Direct job-level filtering using job_type column
        • updated JobController@index() with direct job_type filtering
        • updated JobController@formalJobs() for performance (no complex joins)
        • updated JobController@informalJobs() for performance
        • added backward compatibility for employer_type URL parameters
        • significantly improved query performance by eliminating complex joins

      = **VIEW ROUTING FIXES**
        • fixed JobController@show() method to route based on user's jobseeker type
        • fixed JobController@index() method to use appropriate formal/informal views
        • resolved "view not found" errors for jobs.show and jobs.index routes
        • implemented smart view routing based on authenticated user's profile type
        • ensured all job listing and detail routes work correctly

      = **UI/UX IMPROVEMENTS**
        • added job type badges to all job listing views (formal=green, informal=yellow)
        • updated formal job index with job type indicators
        • updated informal job index with job type indicators  
        • enhanced employer job listing with job type badges
        • implemented visual job type classification across all interfaces

      = **EMPLOYER MODULE SEPARATION (MATCHING JOBSEEKER STRUCTURE)**
        • created separated employer view directories:
          - `resources/views/users/employers/formal/` (professional blue theme)
          - `resources/views/users/employers/informal/` (gig yellow theme)
        • implemented smart view routing helper: `getViewPath()` in EmployerProfileController
        • created type-specific dashboards with appropriate branding and terminology
        • separated all employer views: create, edit, dashboard, jobs management
        • updated all controller methods to use dynamic view routing
        • created route-based dashboard selection for employer types

      = **EMPLOYER DASHBOARD CUSTOMIZATION**
        • **Formal Employer Dashboard**: Professional blue theme, "Company Profile", "Professional Positions"
        • **Informal Employer Dashboard**: Yellow gig theme, "Business Profile", "Gig Opportunities"
        • added real-time job statistics for both employer types
        • implemented proper database field usage (removed non-existent fields)
        • created smart location display using actual address fields (street, barangay, municipality, province)
        • enhanced dashboard with type-specific terminology and visual indicators

      = **CODE CLEANUP & OPTIMIZATION**
        • cleaned up employer view structure (moved all views to formal/informal folders)
        • updated all view-returning controller methods to use smart routing
        • fixed syntax errors and namespace issues in EmployerProfileController
        • implemented consistent MVC pattern across employer modules
        • ensured all routes work correctly with separated view structure

      = **SYSTEM TESTING & VALIDATION**
        • tested all job creation, editing, and listing functionality
        • verified job type filtering works correctly
        • confirmed employer dashboard routing for both types
        • validated database consistency with migration commands
        • ensured no broken routes or missing views
        • **STATUS: Complete job-level classification system with separated employer modules**
        • **BENEFIT: Flexible job posting (formal employers can post gig work, informal can post permanent positions)**